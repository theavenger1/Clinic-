@model Clinic_Website.Models.Clinic

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_MainLayout.cshtml";
}

<h2>Edit</h2>

@using (Html.BeginForm("Edit", "Clinics", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <div class="alert alert-danger" id="error-div" style="display:none">
            <span id="view-err"></span>
        </div>
        <h4>Clinic</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.ClinicImage)
                <div class="form-group">
            @Html.LabelFor(model => model.ClinicName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ClinicName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ClinicName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ClinicDescription, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ClinicDescription, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ClinicDescription, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.ClinicImage, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="file" id="myImage" name="upload" />
                @Html.ValidationMessageFor(model => model.ClinicImage, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AppointmentLength, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AppointmentLength, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AppointmentLength, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StartTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StartTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StartTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EndTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EndTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EndTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MobileNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.MobileNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MobileNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.CategoryId, "CategoryId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CategoryId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">

            <div class="col-md-10">

                <input type="button" onclick="getLocation();" value="Get Location" />
                @Html.HiddenFor(m => m.Latitude, htmlAttributes: new { id = "latt", value = 0 })
                @Html.HiddenFor(m => m.Longitude, htmlAttributes: new { id = "long", value = 0 })

            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

    @section scriptsHere{
        <script>
            function storeLocation(position) {
                var latitude = position.coords.latitude;
                var longitude = position.coords.longitude;
                document.getElementById('latt').value = latitude;
                document.getElementById('long').value = longitude;

            }

            function errorHandler(err) {
                if (err.code == 1) {
                    alert("Error: Access is denied!");
                } else if (err.code == 2) {
                    alert("Error: Position is unavailable!");
                }
            }

            function getLocation() {

                if (navigator.geolocation) {

                    // timeout at 60000 milliseconds (60 seconds)
                    var options = { timeout: 60000 };
                    navigator.geolocation.getCurrentPosition(storeLocation, errorHandler, options);

                } else {
                    alert("Sorry, browser does not support geolocation!");
                }
            }

            $(function () {
                $("#save").click(function () {


                    if ($("#myImage").val() != "") {
                        var filename = document.getElementById("myImage").value;
                        var extentionImg = filename.substr(filename.lastIndexOf('.') + 1);
                        var validExtention = ['jpg', 'png', 'gif'];
                        if ($.inArray(extentionImg, validExtention) == -1) {
                            $("#error-div").fadeIn();
                            $("#view-err").append("Choose the photo with a valid extention");
                            return false;
                        }
                        //check if the image size is valid =2mb
                        var imgSize = document.getElementById("myImage").files[0].size / 1024 / 1024;
                        if (imgSize > 2) {
                            $("#error-div").fadeIn();
                            $("#view-err").append("Choose the photo size less than 2 mb");
                            return false;
                        }
                    }
                });
            });
        </script>
    }

